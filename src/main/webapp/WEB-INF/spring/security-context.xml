<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
	
	
	<!-- 메소드 수준 보안 활성화 -->
    <!-- <security:global-method-security pre-post-annotations="enabled"/> -->
	
	<!-- <security:http auto-config="true" use-expressions="true"> -->
	<security:http authentication-manager-ref="authenticationManager">
		<!-- 접근 권한 설정 -->
		<security:intercept-url pattern="/public/**" access="permitAll" />
		<security:intercept-url pattern="/private/**" access="hasRole('USER')" />
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/> <!-- authenticated, hasRole('ROLE_ADMIN') : 테스트 성공 -->
		
		<security:http-basic />
	    <!-- 로그인 설정 -->
	    <security:form-login 
	        login-page="/public/auth/login?status=0" 
    		default-target-url="/?login=true"
	        login-processing-url="/public/auth/login"
	        authentication-success-handler-ref="customLoginSuccessHandler"
	        authentication-failure-handler-ref="customLoginFailureHandler" />
    
	    <!-- 로그아웃 관련 설정 -->
		<!-- <security:logout 
			logout-url="/private/auth/logout/2" 
			success-handler-ref="customLogoutSuccessHandler" /> --> <!-- 나중에 추가: invalidate-session="false" -->
		
	    <!-- CSRF 보호 : 비활성화 -->
		<!-- <security:csrf disabled="true"/> -->
		
		<!-- 커스텀 필터 체인 -->
        <!-- <security:custom-filter ref="jwtAuthenticationFilter" position="PRE_AUTH_FILTER"/> --> <!-- JWT 사전 인증 (PRE_AUTH_FILTER를 되살리고 싶은 경우: before="FORM_LOGIN_FILTER") -->
        <!-- <security:custom-filter ref="basicFilter" position="BASIC_AUTH_FILTER"/> 내부 관리자 인증 : Basic 인증 -->
        <!-- <security:custom-filter ref="tokenFilter" position="BEARER_TOKEN_AUTH_FILTER"/> API 요청 : JWT 인증 -->
		<!-- <security:custom-filter ref="jwtAuthorizationFilter" before="FILTER_SECURITY_INTERCEPTOR"/> JWT 인가 (최종 결정 직전) -->
		
	</security:http>
	
	<!-- JWT 인증 필터 Bean 등록 -->
    <!-- <bean id="jwtAuthenticationFilter" class="com.library.security.JwtAuthenticationFilter"> -->
        <!-- <constructor-arg ref="jwtUtil" /> -->
        <!-- <constructor-arg ref="userDetailsService" /> -->
   <!--  </bean> -->
	
	<!-- JWT 인가 필터 Bean 등록 -->
	<!-- <bean id="jwtAuthorizationFilter" class="com.library.security.JwtAuthorizationFilter"/> -->
	
	<!-- 사용자 인증 필터 Bean 등록 -->
	<!-- <bean id="basicAuthFilter" class="com.library.security.BasicAuthFilter"/> -->
	<!-- <bean id="tokenAuthFilter" class="com.library.security.TokenAuthFilter"/> -->
	
	<!-- login/out 핸들러 Bean 등록 -->
	<bean id="customLoginSuccessHandler" class="com.library.security.CustomLoginSuccessHandler"/> <!-- redirect:/?login=true -->
	<bean id="customLoginFailureHandler" class="com.library.security.CustomLoginFailureHandler"/> <!-- redirect:/public/auth/login?status=-1 -->
	<bean id="customLogoutSuccessHandler" class="com.library.security.CustomLogoutSuccessHandler"/> <!-- redirect:/?logout=true -->
    
	<!-- UserDetailsService Bean 등록 -->
	<bean id="userDetailsService" class="com.library.security.CustomUserDetailsService"/>
	
	<!-- PasswordEncoder Bean 등록 -->
	<bean id="passwordEncoder" 
		class="org.springframework.security.crypto.factory.PasswordEncoderFactories" 
		factory-method="createDelegatingPasswordEncoder"/>
    
    <!-- 인증 관리자 -->
	<bean id="authenticationManager" 
			class="org.springframework.security.authentication.ProviderManager">
	    <constructor-arg>
	    	<list>
		        <!-- 기존 DaoAuthenticationProvider -->
	            <!-- <bean class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
	                <property name="userDetailsService" ref="userDetailsService"/>
	                <property name="passwordEncoder" ref="passwordEncoder"/>
	            </bean> -->
            
	            <!-- CustomAuthenticationProvider 추가 -->
	            <bean class="com.library.security.CustomAuthenticationProvider" >
	            	<constructor-arg ref="customUserDetailsService"/> <!-- 명시하지 않으면 기존 userDetailService와 충돌남. -->
	            </bean>
            </list>
	    </constructor-arg>
	</bean>
	
	<!-- 테스트 유저 -->
	<!-- <security:user-service id="userDetailsService">
		<security:user name="admin"
			password="{noop}admin123"
			authorities="ROLE_ADMIN" />
	</security:user-service> -->
	
</beans>